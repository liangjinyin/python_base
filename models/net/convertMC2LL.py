# -*- coding: utf-8 -*-#

# ------------------------------------------------------------------------------- 
# Author:       liangjinyin
# Date:         2019/2/27 17:13
# Description:  
# -------------------------------------------------------------------------------


def converter(x, y, cE):
    xTemp = cE[0] + cE[1] * abs(x)
    cC = abs(y) / cE[9]
    yTemp = cE[2] + cE[3] * cC + cE[4] * cC * cC + cE[5] * cC * cC * cC + cE[6] * cC * cC * cC * cC + \
            cE[7] * cC * cC * cC * cC * cC + cE[8] * cC * cC * cC * cC * cC * cC
    if x < 0:
        xTemp = -xTemp
    if y < 0:
        yTemp = -yTemp
    location = [xTemp, yTemp]
    return location


def mcat(x, y):
    MCBAND = [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0]
    LLBAND = [75, 60, 45, 30, 15, 0]
    MC2LL = [[1.410526172116255e-8, 0.00000898305509648872, -1.9939833816331, 200.9824383106796, -187.2403703815547,
              91.6087516669843, -23.38765649603339, 2.57121317296198, -0.03801003308653, 17337981.2],
             [-7.435856389565537e-9, 0.000008983055097726239, -0.78625201886289, 96.32687599759846, -1.85204757529826,
              -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 10260144.86],
             [-3.030883460898826e-8, 0.00000898305509983578, 0.30071316287616, 59.74293618442277, 7.357984074871,
              -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6856817.37],
             [-1.981981304930552e-8, 0.000008983055099779535, 0.03278182852591, 40.31678527705744, 0.65659298677277,
              -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4482777.06],
             [3.09191371068437e-9, 0.000008983055096812155, 0.00006995724062, 23.10934304144901, -0.00023663490511,
              -0.6321817810242, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2555164.4],
             [2.890871144776878e-9, 0.000008983055095805407, -3.068298e-8, 7.47137025468032, -0.00000353937994,
              -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 826088.5]]
    LL2MC = [[-0.0015702102444, 111320.7020616939, 1704480524535203, -10338987376042340, 26112667856603880,
              -35149669176653700, 26595700718403920, -10725012454188240, 1800819912950474, 82.5],
             [0.0008277824516172526, 111320.7020463578, 647795574.6671607, -4082003173.641316, 10774905663.51142,
              -15171875531.51559, 12053065338.62167, -5124939663.577472, 913311935.9512032, 67.5],
             [0.00337398766765, 111320.7020202162, 4481351.045890365, -23393751.19931662, 79682215.47186455,
              -115964993.2797253, 97236711.15602145, -43661946.33752821, 8477230.501135234, 52.5],
             [0.00220636496208, 111320.7020209128, 51751.86112841131, 3796837.749470245, 992013.7397791013,
              -1221952.21711287, 1340652.697009075, -620943.6990984312, 144416.9293806241, 37.5],
             [-0.0003441963504368392, 111320.7020576856, 278.2353980772752, 2485758.690035394,
              6070.750963243378, 54821.18345352118, 9540.606633304236, -2710.55326746645, 1405.483844121726, 22.5],
             [-0.0003218135878613132, 111320.7020701615, 0.00369383431289, 823725.6402795718,
              0.46104986909093, 2351.343141331292, 1.58060784298199, 8.77738589078284, 0.37238884252424, 7.45]]
    cf = []
    x = abs(x)
    y = abs(y)
    for i in range(len(MCBAND)):
        if y >= MCBAND[i]:
            cf = MC2LL[i]
            break

    location = converter(x, y, cf)
    print(location)
    return location


def parseJeo(geo_data):
    if len(geo_data) == 0:
        return None
    geos = geo_data.split("|")
    n = geos[0]
    polylineMoca = geos[2]
    plm = polylineMoca.split(";")
    geo = ''
    if n == '4':
        for i in range(len(plm)):
            geoPaths = plm[i].split("-")
            if geoPaths[0] == '1':
                geo = geoPaths[1]
    geoPolyline = geo.split(",")
    mocatorList = []
    for i in range(0, len(geoPolyline), 2):
        mocatorList.append(str(geoPolyline[i]) + "#" + str(geoPolyline[i + 1]))
    return mocatorList


def my_geom(geo):
    geo_list = parseJeo(geo)
    geom_temp = ''
    for geo_temp in geo_list:
        coordinate = geo_temp.split("#")
        location = mcat(float(coordinate[0]), float(coordinate[1]))
        lng = location[0]
        lat = location[1]
        coord = str(lng) + "," + str(lat)
        geom_temp = geom_temp + coord + ';'
    return geom_temp


def main():
    # 百度坐标点的转换
    # mcat(12617257.71, 2631655.74)
    # 113.3409639637922,23.137508975702385 [113.33327536693484, 23.172881139800015]

    # 百度坐标面的转换
    geo = '4|12617151.3137,2631463.26301;12617356.7842,2631822.04095|1-12617336.9664,2631739.04447,12617356.7842,2631491.36984,12617356.5614,2631477.4087,12617352.7736,2631468.2769,12617342.9696,2631463.26301,12617273.3342,2631464.66413,12617169.0333,2631465.09894,12617161.5666,2631467.6699,12617157.3317,2631472.99064,12617151.3137,2631482.65515,12617162.1249,2631563.47573,12617176.5054,2631652.7035,12617186.4269,2631696.09946,12617188.4329,2631697.1715,12617192.779,2631697.38794,12617234.5661,2631689.70005,12617240.6981,2631726.38015,12617243.8214,2631758.26146,12617251.1774,2631773.75144,12617262.8789,2631788.13697,12617275.9168,2631798.18398,12617295.4175,2631814.22051,12617303.4402,2631818.51655,12617322.6042,2631822.04095,12617327.9519,2631820.45255,12617331.5162,2631814.41851,12617336.9664,2631739.04447;'
    geom_temp = my_geom(geo)
    print(geom_temp)


if __name__ == '__main__':
    main()
